<Workflow>
	<Start/>
	<Finish/>
	<UserTask name="UI0"/>
	<UserTask name="UI1"/>
	<UserTask name="UI2"/>
	<UserTask name="UI3"/>
	<!--<DataStore  expression="'{0}'">
		<parameter name="fn" type="function" value="getMessageLang|ua|blinked|z)" />
	</DataStore>
	<DataStore  expression="'{0}'">
		<parameter name="fn" type="function" value="getMessageLang|ua|blinked|za)" />
	</DataStore>
	<DataStore  expression="'{0}'">
		<parameter name="fn" type="function" value="getMessageLang|ua|blinked|zb)" />
	</DataStore>
	<WorkflowProcedure name="wf_initIdentSessionJS" procedureName="initIdentSessionJS">
		<parameter name="parType" type="constant" value="otp" />
		<parameter name="parIdentifSessionId" type="constant" value="12345" />
		<parameter name="parPhone" type="appData" value="$.paymentDataList[0].requestData.inputParam[?(@.kindId==3 &amp;&amp; @.identifierType==0)].value" />
		<parameter name="parTransactionList" type="appData" value="$.paymentDataList[*].responseData" />
		<parameter name="parMaxWrongOtp" type="constant" value="12" />
	</WorkflowProcedure>
	--><!--<WorkflowProcedure name="wf_initIdentSessionJS" procedureName="unknownProc">
		<parameter name="parType" type="constant" value="" />
	</WorkflowProcedure>--><!--


	<Script name="ts1" output="scriptOutput" saveAs="string" path="$"  >
		<parameter name="stage_arg" type="arg" value="stage" />
		<ScriptText>
			<![CDATA[
    //получение знчения битовой маски 
    result =fn_execute("getMessageLang","ua|au|"+stage_arg);
            ]]>
		</ScriptText>
	</Script>
	<Script name="ts2" output="scriptOutput" saveAs="string" path="$"  >
		<ScriptText>
			<![CDATA[
    //получение знчения битовой маски 
    result =fn_execute("genid","");
            ]]>
		</ScriptText>
	</Script>
	--><!--<Point name="UI0"/>
	<Point name="UI0"/>--><!--
	--><!--<UserTask name="UI0"/>--><!--
	<UserTask name="UI0"/>
	<DataTransform name="generateHtmlRates" output="infoData.rates" path="$.serviceResponseData" >
		<template inputType="json" outputType="xml">
			<![CDATA[
      <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fn="urn:custom-functions" xmlns:msxsl="urn:schemas-microsoft-com:xslt" exclude-result-prefixes="msxsl fn">
      <xsl:output method="html" indent="no"/>
      <xsl:template match="/root">
          <xsl:variable name="storeData">
                <xsl:copy-of select="transaction/rates"/>
          </xsl:variable>
        <xsl:variable name="rts">
            <item>1</item>
            <item>2</item>
        </xsl:variable>
      <table class="commission-body">
           

	--><!--<DataStore name="inlineFunc_fn_custom" expression="'$.dynamicOutput'" output="pathOutput" saveAs="arg"/>--><!--
	<Script output="scriptOutput" saveAs="string" path="$"  >
		<parameter name="stage" type="appData" value="data" />
		<parameter name="stage" type="control" value="Text1.Value" />
		<ScriptText>
			<![CDATA[
				var result = fn_execute('getrandom|string:5');
			]]>
		</ScriptText>
	</Script>
	<DataStore name="inlineFunc_fn_custom" expression="'{0}'">
		<parameter name="fn" type="function" value="getMessageLang|ua|blinked|z)" />
	</DataStore>
	<DataStore name="inlineFunc_getrandom_string" expression="'{0}'">
		<parameter name="fn" type="function" value="fn_getrandom|string:5" />
	</DataStore>
	<DataStore name="inlineFunc_getrandom_int" expression="'{0}'">
		<parameter name="fn" type="function" value="fn_getrandom|int:5" />
	</DataStore>
	<DataStore name="inlineFunc_getrandom_datetime" expression="'{0}'">
		<parameter name="fn" type="function" value="fn_getrandom|datetime:2d-7d" />
	</DataStore>
	<DataStore name="inlineFunc_getrandom_ip" expression="'{0}'">
		<parameter name="fn" type="function" value="fn_getrandom|ip" />
	</DataStore>
	<DataStore name="inlineFunc_getrandom_intRange" expression="'{0}'">
		<parameter name="fn" type="function" value="fn_getrandom|int:2-10" />
	</DataStore>
	<DataStore name="inlineFunc_currdate" expression="'{0}'">
		<parameter name="fn" type="function" value="fn_currentdate|yyyy/MM/dd" />
	</DataStore>
	<DataStore name="inlineFunc_getrandom_uid" expression="'{0}'">
		<parameter name="fn" type="function" value="genid" />
	</DataStore>
	<DataRemove name="dr" output="$.total.nfc"/>-->

	<!--<DataRemove name="dr" output="pathOutput" saveAs="arg"/>-->-->
	<!--<WorkflowProcedure  procedureName="unknownProc" version="1" matchVer="strict">
		<parameter name="pathOutput" type="constant" value="$.dynamicOutput"/>
	</WorkflowProcedure>-->

	<!--<UserTask name="UI0"/>-->

	<!--<DataStore name="ds_setStageInputParam1" expression="$.script_result" lang="jpath" output="$.serviceRequestDataList[0].optionalData.timeGenOtp" />-->
	<Finish/>
	<WorkflowProcedures>
		<WorkflowProcedure name="initIdentSessionJS">
			<!-- Назначение: 
          Инициализирует объект initIdentSession начальными данными. Данный объект используется в процессе OTP/Push авторизации 
       Результат: 
          Сохраняется как объект по заданому ключу контекста - по умолчанию в  $.initIdentSession
       Особенности: 
          Использует JS
       Входящие параметы:
          parType - обязательный параметр, определяет тип сессии идентификации: otp, push 
          parIdentifSessionId - не обязательный параметр, определяет идентификтор сессии идентификации, при отсутсвии значения выполняется генерация UUID
          parPhone - не обязательный параметр, определяет телефон куда будет отправлен SMS/Call, имеет смысл только для parType = otp
          parTransactionList - обязательный параметр, определяет список транзакци которые авторизируются данным номером телефона, может принимать: 
            скалярное значение(число или строку содержащее число): 100 или "100"
            строку содержащую валидный Json массив скалярных значений: "[10,20]"  
            Json массив скалярных значений: [10,20]
            сложный json объект который должен содержать один ключ с именем transactionid (регистр не важен): {"responseData":{"transaction":{"transactionId":100}}}
            Json массив сложных объектов каждій их которые должен содержать один ключ с именем transactionid (регистр не важен): {"responseData":[{"transaction":{"transactionId":100}}]}
          parPayServiceId - обязательный параметр, определяет идентификатор платежного сервиса
          parMaxClientTry - не обязательный параметр определяет максимальное количество попыток отправки ОТП (значение по умолчанию 3)
          parMaxWrongOtp - не обязательный параметр определяет максимальное количество ввода не правильного ОТП (значение по умолчанию 3)
          parPathOutput - не обязательный парметр определяющий путь в контектсе куда будет сохранен результирующий объект (значение по умолчанию $.initIdentSession)
      Использование:
          Используется вначале процесса авторизации по OTP, устанавливается parType = otp, заполняется parPhone - далее будет вызван коннектор sendPhoneAuth 
          Используется вначале процесса авторизации по push, устанавливается parType = push,  далее будет вызван коннектор sendPush  
  -->
			<!-- Пляски с бубном для получения дефолтного значения параметра parOutputPath -->
			<DataStore name ="ds1_initIdentSessionJSript" output="_tmpProcedureParOutputPath" expression="'$.initIdentSession'"/>
			<DataStore name ="ds2_initIdentSessionJSript" output="parPathOutput" expression="'{0}'" saveAs="arg">
				<parameter value="parPathOutput" type="arg"  default="$._tmpProcedureParOutputPath"/>
			</DataStore>
			<!-- Выполнение скрипта -->
			<Script name="initIdentSessionJSript" output="#parPathOutput" saveAs="jn" path="$" lang="jscript">
				<parameter name="type" type="arg" value="parType" />
				<parameter name="identifSessionId" type="arg" value="parIdentifSessionId" />
				<parameter name="phone" type="arg" value="parPhone" />
				<parameter name="transactionList" type="arg" value="parTransactionList" />
				<parameter name="payServiceId" type="arg" value="parPayServiceId" />
				<parameter name="maxClientTry" type="arg" value="parMaxClientTry" />
				<parameter name="maxWrongOtp" type="arg" value="parMaxWrongOtp" />
				<ScriptText>
					<![CDATA[
      //Получение форматированной даты/времени YYYY-MM-DDTHH24:MI:SS
      function formatDate(date) {
          let year = date.getFullYear();
          let month = String(date.getMonth() + 1).padStart(2, '0'); // Месяцы от 0 до 11, поэтому добавляем 1
          let day = String(date.getDate()).padStart(2, '0');
          let hours = String(date.getHours()).padStart(2, '0');
          let minutes = String(date.getMinutes()).padStart(2, '0');
          let seconds = String(date.getSeconds()).padStart(2, '0');
      
          return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
      }
      //Поиск заданного ключа в Json объекте 
      function findValuesByKey(obj, key) {
          let result = [];
          let stack = [obj];
          while (stack.length > 0) {
              let current = stack.pop();
              for (let k in current) {
                  if (k.toLowerCase() === key) {
                      result.push(current[k]);
                  } else if (typeof current[k] === 'object' && current[k] !== null) {
                      stack.push(current[k]);
                  }
              }
          }
          return result;
      }
      
        //Проверка пустой ли массив
        function isNotEmptyArray(array) {
            return Array.isArray(array) && array.length > 0 && array.some(item => item !== "");
        }
      
        //Генерация стартового ОТР
        function generateOTP() {
            const digits = '0123456789';
            let OTP = '';
            for (let i = 0; i < 4; i++) {
                OTP += digits[Math.floor(Math.random() * 10)];
            }
            return OTP;
        }
     
        //Получить параметр определяющий идентификатор сесии 
        if (!(identifSessionId && typeof identifSessionId === "string" && identifSessionId.trim() !== "")) {
            identifSessionId = fn_genID( );
        }
      
        //Получить параметр определяющий максимальное количество попыток инициации отправки ОТП 
        maxClientTry = maxClientTry || 3;
        //Получить параметр определяющий максимальное количество попыток не верного ввода ОТП 
        maxWrongOtp = maxWrongOtp || 3;
      
        //Сгененрировать при неоходимости ОТП
        let otp = "";
        let timeGenOtp = "";
        if (type === "otp") {
            otp = generateOTP();
            timeGenOtp = formatDate(new Date()) ;
        }
        //Сформировать массив  транзакций
        let transactionidList = "";
        let tmpList = [];
        let data = JSON.parse((transactionList) ? transactionList : "{}");
        
        if (isNotEmptyArray(data)) {
            tmpList = data.flatMap(item => 
              typeof item === "number" || typeof item === "string" ? item : findValuesByKey(item, "transactionid")
          );
      
        } else if (typeof data === "object" && data !== null) {
          tmpList = findValuesByKey(data, "transactionid");
        } 
        else {
            tmpList= data;
        }
        transactionidList = "["+tmpList.join(",")+"]";
        
        // Создание результирующего  объекта
        const jsonObject = {
            type: type,
            identifSessionId: identifSessionId,
            otp: otp,
            phone: (phone) ? phone :"",
            clientTry: 0,
            maxClientTry: Number(maxClientTry),
            maxWrongOtp: Number(maxWrongOtp),
            payServiceId: Number(payServiceId),
            transactionsId: transactionidList,
            authTime: "",
            authTypeOtp: "",
            timeGenOtp: timeGenOtp
        };
      
        var result = JSON.stringify(jsonObject);   
             ]]>
				</ScriptText>
			</Script>

		</WorkflowProcedure>
		<WorkflowProcedure name="unknownProc" version="1">
			<!--<DataStore name="someDS" expression="'DoesntMatterWhat'" output="#stage" />-->
			<Script output="#pathOutput" saveAs="string" path="$"  >
				<parameter name="stage" type="appData" value="data" />
				<parameter name="stage" type="control" value="Text1.Value" />
				<ScriptText>
					<![CDATA[
				var result = fn_genID();
			]]>
				</ScriptText>
			</Script>
		</WorkflowProcedure>
	</WorkflowProcedures>
</Workflow>

<!--<DataStore name="inlineFunc_fn_custom" expression="'dd'" output="#stage"/>
<DataStore name="inlineFunc_fn_custom" expression="'{0}'">
		<parameter name="fn" type="function" value="GetLocale|ua|blinked|z)" />
	</DataStore>
	<DataStore name="inlineFunc_getrandom_string" expression="'{0}'">
		<parameter name="fn" type="function" value="fn_getrandom|string:5" />
	</DataStore>
	<DataStore name="inlineFunc_getrandom_int" expression="'{0}'">
		<parameter name="fn" type="function" value="fn_getrandom|int:5" />
	</DataStore>
	<DataStore name="inlineFunc_getrandom_datetime" expression="'{0}'">
		<parameter name="fn" type="function" value="fn_getrandom|datetime:2d-7d" />
	</DataStore>
	<DataStore name="inlineFunc_getrandom_ip" expression="'{0}'">
		<parameter name="fn" type="function" value="fn_getrandom|ip" />
	</DataStore>
	<DataStore name="inlineFunc_getrandom_intRange" expression="'{0}'">
		<parameter name="fn" type="function" value="fn_getrandom|int:2-10" />
	</DataStore>
	<DataStore name="inlineFunc_currdate" expression="'{0}'">
		<parameter name="fn" type="function" value="fn_currentdate|yyyy/MM/dd" />
	</DataStore>
	<DataStore name="inlineFunc_unix" expression="'{0}'">
		<parameter name="fn" type="function" value="fn_unixtime" />
	</DataStore>
	<DataRemove name="dr" output="$.total.nfc"/>-->